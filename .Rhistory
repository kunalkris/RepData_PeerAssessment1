cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -(5:20))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf)
""
)
)
""
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- select(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
reset()
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
z <- c(z,555,z)
c(z,555,z)
z*2+100
my_sqrt<- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(1,10)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[is.na(x) & x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2,
| norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect[bar]
vect["bar"]
vect[c("foo","bar")]
rm()
rm(all)
swirl()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
?mutate
extract_numeric("class5")
submit()
students4
submit()
?unique
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_dar)
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("--192012")
ymd("--1920-1-2")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, now())
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours = 10, minutes = 43, seconds = 0)
this_moment
?now
now("America/New_York")
nyc <- now("America/New_York")
nyc
nyc <- nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours(17), minutes(34))
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive<- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
ls
ls()
allob <- ls()
allob
rm(allob)
rm(list = ls())
swirl()
library(swirl)
swirl()
33/36
deck
52
4/52
0
12/52
2/51
.64
.64
mypdf
mypdf(1.6)
?integrate
integrate(mypdf,0,1.6)
0.5
sqrt(2)
0.997*0.001
(1-0.985)*(1-0.001)
0.997*0.001/(0.997*0.001 + (1-0.985)*(1-0.001))
1/6
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh+edl)
myfunc
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
set.seed(1234)
?par
?mar
par(mar = c(0,0,0,0))
mar
rm(list= ls())
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
x
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
y
plot(x,y)
plot(x,y, col = 'blue', pch = 19, cex = 2)
plot(x,y, col = 'blue', pch = 19, cex = 2)
plot(x,y, col = 'blue', pch = 19, cex = 2)
plot(x,y, col = 'blue', pch = 19, cex = 2)
plot(x,y, col = 'blue', pch = 19, cex = 2)
plot(x,y, col = 'blue', pch = 19, cex = 2)
plot(x,y, col = 'blue', pch = 19, cex = 2)
plot(x,y, col = 'blue', pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
plot(x,y, col = 'blue', pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
plot(x,y, col = 'blue', pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
plot(x,y, col = 'blue', pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy<- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
?colorramp
?colorRamp
?connections
test1 <- url("http://www.facebook.com")
test1
?isopen
?isOpen
moby_url = url("http://www.gutenberg.org/ebooks/2701.txt.utf-8")
moby_dick = readLines(moby_url, n = 500)
moby_dick[1:5]
moby_dick_chap1 = rep("", 10)
moby_dick_chap1
skip = 535
for (i in 1L:10) {
download.file("http://www.gutenberg.org/cache/epub/2701/pg2701.txt", "mobydick.txt")
source('~/.active-rstudio-document')
getwd()
ls()
dir()
source('~/.active-rstudio-document')
moby_dick_chap1 = rep("", 10)# number of lines to skip until Chapter 1skip = 535# reading 10 lines (line-by-line using scan)for (i in 1L:10) {  one_line = scan("mobydick.txt", what = "", skip = skip, nlines = 1) # pasting the contents in one_line  moby_dick_chap1[i] = paste(one_line, collapse = " ")  skip = skip + 1}
moby_dick_chap1 = rep("", 10)# number of lines to skip until Chapter 1skip = 535# reading 10 lines (line-by-line using scan)for (i in 1L:10) {  one_line = scan("mobydick.txt", what = "", skip = skip, nlines = 1) # pasting the contents in one_line  moby_dick_chap1[i] = paste(one_line, collapse = " ")  skip = skip + 1}
moby_dick_chap1 = rep("", 10)
skip = 535
for (i in 1L:10) {  one_line = scan("mobydick.txt", what = "", skip = skip, nlines = 1) # pasting the contents in one_line  moby_dick_chap1[i] = paste(one_line, collapse = " ")  skip = skip + 1}
for (i in 1L:10) {  one_line = scan("mobydick.txt", what = "", skip = skip, nlines = 1) # pasting the contents in one_line  moby_dick_chap1[i] = paste(one_line, collapse = " ")  skip = skip + 1}
for (i in 1L:10) {
one_line = scan("mobydick.txt", what = "", skip = skip, nlines = 1) # pasting the contents in one_line
moby_dick_chap1[i] = paste(one_line, collapse = " ")
skip = skip + 1
}
moby_dick_chap1
one_line
taxon_url = "http://www.bio.ic.ac.uk/research/mjcraw/therbook/data/taxon.txt"
taxon = read.table(taxon_url, header = TRUE, row.names = 1)
head(taxon)
View(taxon)
iris_file = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
iris_data = read.csv(iris_file, header = FALSE)
library(RCurl)
iris_url = getURL(iris_file)
?getURL
iris_url
?textConnection
iris_data = read.csv(textConnection(iris_url), header = FALSE)
head(iris_data)
library(gdata)
install.packages("gdata")
?gdata
alpha_xls = "http://www.lsi.upc.edu/ ̃belanche/Docencia/mineria/Practiques/alpha.xls"
sheetCount(alpha_xls)
library(gdata)
sheetCount(alpha_xls)
sheetNames(alpha_xls)
alpha_data = read.xls(alpha_xls, sheet = 1)
google_docs = "https://docs.google.com/spreadsheet/"
cars_key = "pub?key=0AjoVnZ9iB261dHRfQlVuWDRUSHdZQ1A4N294TEstc0E&output=csv"
cars_csv = getURL(paste(google_docs, cars_key, sep = ""))
cars_csv
cars2004 = read.csv(textConnection(cars_csv), row.names = 1, header = TRUE)
View(cars2004)
library(XML)
swim_wiki = "http://en.wikipedia.org/wiki/World_record_progression_1500_metres_freestyle"
swim1500 = readHTMLTable(swim_wiki, which = 1, stringsAsFactors = FALSE)
head(swim1500)
travelbooks = "http://maths-people.anu.edu.au/ ̃johnm/r/misc-data/travelbooks.R"
source(travelbooks)
travelbooks = "http://maths-people.anu.edu.au/~johnm/r/misc-data/travelbooks.R"
source(travelbooks)
View(travelbooks)
View(travelbooks)
rm(list = ls())
?pnorm
pnorm(84, mean=72, sd=15.2, lower.tail=FALSE)
pnorm(70, mean=80, sd=10, lower.tail=FALSE)
pnorm(70, mean=80, sd=10)
qnorm(80,10)
qnorm(95, 80,10)
qnorm(0.95, 80,10)
rnorm(0.95, 80,10)
qnorm(0.95, 0,1)
qnorm(0.95, 1100, 75)
a<- sqrt(75*75/100)
a
qnorm(0.95, 1100, 7.5)
?binom
rbinom(4,5,0.5)
pbinom(4,5,0.5)
pbinom(4,5,0.5, lower.tail = FALSE)
?rpois
ppois(5,10,3)
ppois(10,5,3)
ppois(10,15)
source('~/.active-rstudio-document')
summary(fit)
mtcars
source('~/.active-rstudio-document')
predict(fit,data.frame(x=mean(x)), interval="confidence")
?mtcars
predict(fit,data.frame(x=3), interval="prediction")
rm(list = ls())
getwd()
dir()
setwd("./getdata")
dir()
?unzip
unzip("activity.zip")
dir()
setwd(../)
setwd("../repdata")
getwd()
setwd("./RepData_PeerAssessment1")
dir()
unzip(activity.zip)
unzip("activity.zip")
activity <- read.csv("activity.csv")
View(activity)
?aggregate
StepsPerDay <- aggregate(steps ~ date, data = activity, FUN = sum sum, na.rm = TRUE)
StepsPerDay <- aggregate(steps ~ date, data = activity, FUN = sum, na.rm = TRUE)
View(StepsPerDay)
hist(StepsPerDayl$steps, main = "Total steps taken per day", xlab = "Day")
hist(StepsPerDay$steps, main = "Total steps taken per day", xlab = "Day")
mean(StepsPerDayl$steps)
mean(StepsPerDay$steps)
median(StepsPerDay$steps)
rm(list = ls())
unzip("activity.zip")
activity <- read.csv("activity.csv")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
View(activity)
StepsPerDay <- aggregate(steps ~ date, data = activity, FUN = sum, na.rm = TRUE)
hist(StepsPerDay$steps, main = "Total steps taken per day", xlab = "Day")
mean(StepsPerDay$steps)
median(StepsPerDay$steps)
StepsPerDay <- totsteps <- tapply(activity$steps, activity$date, sum)
StepsPerDay <- tapply(activity$steps, activity$date, sum)
rm(totsteps)
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval", ylab = "Average steps across all days", main = "Average steps taken at 5 minute intervals")
plot(row.names(time_series), time_series, type = "l", xlab = "Time intervals (5-min)", ylab = "Average steps across all days", main = "Average steps taken at 5 minute intervals")
max_interval <- which.max(time_series)
names(max_interval)
activity_NA <- sum(is.na(activity))
activity_NA
NA_indicies <- which(is.na(activity))
AverageActivity <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
fillValue <- AverageActivity[as.character(activity[na_indices, 3])]
fillValue <- AverageActivity[as.character(activity[na_indicies, 3])]
fillValue <- AverageActivity[as.character(activity[NA_indicies, 3])]
for (i in NA_indices) {
activity$steps[i] = fillValue[as.character(i)]
}
for (i in NA_indicies) {
activity$steps[i] = fillValue[as.character(i)]
}
TotalSteps <- tapply(activity$steps, activity$date, sum)
hist(totsteps, col = "red", xlab = "Total Steps per Day", ylab = "Frequency", main = "Histogram of Total Steps taken per day")
totalSteps <- tapply(activity$steps, activity$date, sum)
hist(totalSteps, xlab = "Total Steps per Day", ylab = "Frequency", main = "Histogram of Total Steps taken per day")
hist(totalSteps, xlab = "Day", ylab = "Frequency", main = "Total Steps taken per day")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
library(lattice)
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
daylevel <- vector()
for (i in 1:nrow(activity)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
}
else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
}
else { daylevel[i] <- "Weekday"
}
}
activity$daylevel <- daylevel activity$daylevel <- factor(activity$daylevel)
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
activity$daylevel <- daylevel activity$daylevel <- factor(activity$daylevel)
activity$daylevel <- daylevel
day <- weekdays(activity$date)
daylevel <- vector()
for (i in 1:nrow(activity)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
}
else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
}
else { daylevel[i] <- "Weekday"
}
}
activity$daylevel <- daylevel
activity$daylevel <- factor(activity$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = activity, mean)
names(stepsByDay) <- c("interval", "daylevel", "steps")
xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of steps")
?knitr
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?knitr
?knit2html
knit2html("PA1_templare.Rmd")
knit2html("PA1_template.Rmd")
